{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manikanta.prasad\\\\source\\\\repos\\\\ReactApp\\\\src\\\\components\\\\WeatherWidget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherWidget = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Simulate weather data fetching\n  useEffect(() => {\n    const fetchWeather = () => {\n      setLoading(true);\n\n      // Simulate API delay\n      setTimeout(() => {\n        const conditions = ['Sunny', 'Cloudy', 'Rainy', 'Partly Cloudy', 'Clear'];\n        const cities = ['New York', 'London', 'Tokyo', 'Paris', 'Sydney'];\n        const mockWeather = {\n          temperature: Math.floor(Math.random() * 30) + 10,\n          // 10-40°C\n          condition: conditions[Math.floor(Math.random() * conditions.length)],\n          humidity: Math.floor(Math.random() * 40) + 40,\n          // 40-80%\n          windSpeed: Math.floor(Math.random() * 20) + 5,\n          // 5-25 km/h\n          city: cities[Math.floor(Math.random() * cities.length)]\n        };\n        setWeather(mockWeather);\n        setLoading(false);\n      }, 1000);\n    };\n    fetchWeather();\n\n    // Refresh weather every 30 seconds\n    const interval = setInterval(fetchWeather, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const getWeatherIcon = condition => {\n    switch (condition.toLowerCase()) {\n      case 'sunny':\n        return '☀️';\n      case 'cloudy':\n        return '☁️';\n      case 'rainy':\n        return '🌧️';\n      case 'partly cloudy':\n        return '⛅';\n      case 'clear':\n        return '🌙';\n      default:\n        return '🌤️';\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading weather data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n  if (!weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: \"Failed to load weather data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-widget\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: weather.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-icon\",\n        children: getWeatherIcon(weather.condition)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"temperature\",\n        children: [weather.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"condition\",\n        children: weather.condition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Humidity:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [weather.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Wind Speed:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [weather.windSpeed, \" km/h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-note\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is a simulated weather widget. In a real app, you would connect to a weather API.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherWidget, \"8S9MM6CRsAKHmMjrPFeKJiV0PfY=\");\n_c = WeatherWidget;\nexport default WeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"WeatherWidget\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherWidget","_s","weather","setWeather","loading","setLoading","fetchWeather","setTimeout","conditions","cities","mockWeather","temperature","Math","floor","random","condition","length","humidity","windSpeed","city","interval","setInterval","clearInterval","getWeatherIcon","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/manikanta.prasad/source/repos/ReactApp/src/components/WeatherWidget.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\ninterface WeatherData {\r\n  temperature: number;\r\n  condition: string;\r\n  humidity: number;\r\n  windSpeed: number;\r\n  city: string;\r\n}\r\n\r\nconst WeatherWidget: React.FC = () => {\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Simulate weather data fetching\r\n  useEffect(() => {\r\n    const fetchWeather = () => {\r\n      setLoading(true);\r\n      \r\n      // Simulate API delay\r\n      setTimeout(() => {\r\n        const conditions = ['Sunny', 'Cloudy', 'Rainy', 'Partly Cloudy', 'Clear'];\r\n        const cities = ['New York', 'London', 'Tokyo', 'Paris', 'Sydney'];\r\n        \r\n        const mockWeather: WeatherData = {\r\n          temperature: Math.floor(Math.random() * 30) + 10, // 10-40°C\r\n          condition: conditions[Math.floor(Math.random() * conditions.length)],\r\n          humidity: Math.floor(Math.random() * 40) + 40, // 40-80%\r\n          windSpeed: Math.floor(Math.random() * 20) + 5, // 5-25 km/h\r\n          city: cities[Math.floor(Math.random() * cities.length)]\r\n        };\r\n        \r\n        setWeather(mockWeather);\r\n        setLoading(false);\r\n      }, 1000);\r\n    };\r\n\r\n    fetchWeather();\r\n    \r\n    // Refresh weather every 30 seconds\r\n    const interval = setInterval(fetchWeather, 30000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getWeatherIcon = (condition: string) => {\r\n    switch (condition.toLowerCase()) {\r\n      case 'sunny':\r\n        return '☀️';\r\n      case 'cloudy':\r\n        return '☁️';\r\n      case 'rainy':\r\n        return '🌧️';\r\n      case 'partly cloudy':\r\n        return '⛅';\r\n      case 'clear':\r\n        return '🌙';\r\n      default:\r\n        return '🌤️';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"weather-widget\">\r\n        <div className=\"loading\">Loading weather data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!weather) {\r\n    return (\r\n      <div className=\"weather-widget\">\r\n        <div className=\"error\">Failed to load weather data</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"weather-widget\">\r\n      <div className=\"weather-header\">\r\n        <h3>{weather.city}</h3>\r\n        <div className=\"weather-icon\">\r\n          {getWeatherIcon(weather.condition)}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"weather-main\">\r\n        <div className=\"temperature\">\r\n          {weather.temperature}°C\r\n        </div>\r\n        <div className=\"condition\">\r\n          {weather.condition}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"weather-details\">\r\n        <div className=\"detail\">\r\n          <span>Humidity:</span>\r\n          <span>{weather.humidity}%</span>\r\n        </div>\r\n        <div className=\"detail\">\r\n          <span>Wind Speed:</span>\r\n          <span>{weather.windSpeed} km/h</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"weather-note\">\r\n        <p>This is a simulated weather widget. In a real app, you would connect to a weather API.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherWidget; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}